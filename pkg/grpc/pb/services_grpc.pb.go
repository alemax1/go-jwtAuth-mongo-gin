// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineServiceClient is the client API for EngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineServiceClient interface {
	GetAllEngines(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Engines, error)
	GetEnginesByIDs(ctx context.Context, in *EnginesIDs, opts ...grpc.CallOption) (*Engines, error)
	GetEngineByID(ctx context.Context, in *EngineID, opts ...grpc.CallOption) (*Engine, error)
}

type engineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineServiceClient(cc grpc.ClientConnInterface) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) GetAllEngines(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Engines, error) {
	out := new(Engines)
	err := c.cc.Invoke(ctx, "/proto.EngineService/GetAllEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetEnginesByIDs(ctx context.Context, in *EnginesIDs, opts ...grpc.CallOption) (*Engines, error) {
	out := new(Engines)
	err := c.cc.Invoke(ctx, "/proto.EngineService/GetEnginesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetEngineByID(ctx context.Context, in *EngineID, opts ...grpc.CallOption) (*Engine, error) {
	out := new(Engine)
	err := c.cc.Invoke(ctx, "/proto.EngineService/GetEngineByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServiceServer is the server API for EngineService service.
// All implementations must embed UnimplementedEngineServiceServer
// for forward compatibility
type EngineServiceServer interface {
	GetAllEngines(context.Context, *Req) (*Engines, error)
	GetEnginesByIDs(context.Context, *EnginesIDs) (*Engines, error)
	GetEngineByID(context.Context, *EngineID) (*Engine, error)
	mustEmbedUnimplementedEngineServiceServer()
}

// UnimplementedEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServiceServer struct {
}

func (UnimplementedEngineServiceServer) GetAllEngines(context.Context, *Req) (*Engines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEngines not implemented")
}
func (UnimplementedEngineServiceServer) GetEnginesByIDs(context.Context, *EnginesIDs) (*Engines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnginesByIDs not implemented")
}
func (UnimplementedEngineServiceServer) GetEngineByID(context.Context, *EngineID) (*Engine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineByID not implemented")
}
func (UnimplementedEngineServiceServer) mustEmbedUnimplementedEngineServiceServer() {}

// UnsafeEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServiceServer will
// result in compilation errors.
type UnsafeEngineServiceServer interface {
	mustEmbedUnimplementedEngineServiceServer()
}

func RegisterEngineServiceServer(s grpc.ServiceRegistrar, srv EngineServiceServer) {
	s.RegisterService(&EngineService_ServiceDesc, srv)
}

func _EngineService_GetAllEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetAllEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EngineService/GetAllEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetAllEngines(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetEnginesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnginesIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetEnginesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EngineService/GetEnginesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetEnginesByIDs(ctx, req.(*EnginesIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetEngineByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetEngineByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EngineService/GetEngineByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetEngineByID(ctx, req.(*EngineID))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineService_ServiceDesc is the grpc.ServiceDesc for EngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllEngines",
			Handler:    _EngineService_GetAllEngines_Handler,
		},
		{
			MethodName: "GetEnginesByIDs",
			Handler:    _EngineService_GetEnginesByIDs_Handler,
		},
		{
			MethodName: "GetEngineByID",
			Handler:    _EngineService_GetEngineByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetCarsIDsByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CarsIDs, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetCarsIDsByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CarsIDs, error) {
	out := new(CarsIDs)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetCarsIDsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetCarsIDsByID(context.Context, *UserID) (*CarsIDs, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetCarsIDsByID(context.Context, *UserID) (*CarsIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsIDsByID not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetCarsIDsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCarsIDsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetCarsIDsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCarsIDsByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarsIDsByID",
			Handler:    _UserService_GetCarsIDsByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	GetCarsByIDs(ctx context.Context, in *CarsIDs, opts ...grpc.CallOption) (*Cars, error)
	GetEngineID(ctx context.Context, in *CarID, opts ...grpc.CallOption) (*EngineID, error)
	GetEnginesIDs(ctx context.Context, in *CarsIDs, opts ...grpc.CallOption) (*EnginesIDs, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) GetCarsByIDs(ctx context.Context, in *CarsIDs, opts ...grpc.CallOption) (*Cars, error) {
	out := new(Cars)
	err := c.cc.Invoke(ctx, "/proto.CarService/GetCarsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetEngineID(ctx context.Context, in *CarID, opts ...grpc.CallOption) (*EngineID, error) {
	out := new(EngineID)
	err := c.cc.Invoke(ctx, "/proto.CarService/GetEngineID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetEnginesIDs(ctx context.Context, in *CarsIDs, opts ...grpc.CallOption) (*EnginesIDs, error) {
	out := new(EnginesIDs)
	err := c.cc.Invoke(ctx, "/proto.CarService/GetEnginesIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	GetCarsByIDs(context.Context, *CarsIDs) (*Cars, error)
	GetEngineID(context.Context, *CarID) (*EngineID, error)
	GetEnginesIDs(context.Context, *CarsIDs) (*EnginesIDs, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) GetCarsByIDs(context.Context, *CarsIDs) (*Cars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsByIDs not implemented")
}
func (UnimplementedCarServiceServer) GetEngineID(context.Context, *CarID) (*EngineID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineID not implemented")
}
func (UnimplementedCarServiceServer) GetEnginesIDs(context.Context, *CarsIDs) (*EnginesIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnginesIDs not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_GetCarsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarsIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CarService/GetCarsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarsByIDs(ctx, req.(*CarsIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetEngineID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetEngineID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CarService/GetEngineID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetEngineID(ctx, req.(*CarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetEnginesIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarsIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetEnginesIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CarService/GetEnginesIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetEnginesIDs(ctx, req.(*CarsIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarsByIDs",
			Handler:    _CarService_GetCarsByIDs_Handler,
		},
		{
			MethodName: "GetEngineID",
			Handler:    _CarService_GetEngineID_Handler,
		},
		{
			MethodName: "GetEnginesIDs",
			Handler:    _CarService_GetEnginesIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
